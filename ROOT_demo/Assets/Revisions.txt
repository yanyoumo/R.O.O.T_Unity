Build Version:0.1/59598
Major Update:
    1、支持了所有iOS 12以上设备。
    2、锁定了iOS设备的屏幕方向。
    3、移除了英文语言的支持。
    4、恢复了Tutorial结束界面中“下一关”的按钮。
    5、修复了天灾标记消失的问题。

Build Version:0.1/59661
Major Update:
    更新：
        1、添加了手动步进按钮。（键盘版）
        2、按住屏幕0.3s即可步进。（触屏版）
    修复：
	    1、修复了每场Destoryer的随机数种子都一样的问题。

Build Version:0.2/00088
Major Update:
    更新：
		1、在单元接口上添加了信号数值的提示。
		2、添加了时间线玩法。
    修复：
	TODO:
		1、游戏LevelLogic的重新整理。
		2、ActionAsset的Object功能的整理。
	想TutorialManager目前的所有对逻辑的微调是不是需要整合起来。

Build Version:0.2/00127
Major Update:
    更新：
		1、添加了生涯模式的玩法。
		2、将新的新手指南模式整合到生涯模式中。
		3、移除了旧的新手指南模式。
		4、移除了旧的一般游戏模式。
	修复：
		1、修复了iOS设备上天灾标记不显示的问题。

Build Version:0.2/00178
Major Update:
    更新：
		1、优化了UI相关显示效果
    修复：
		1、时间线计分的错误
	TODO:
		1、在时间线框架上需要添加一个未来要求的提示。

Build Version:0.2/00185
Major Update:
    更新：
		1、商店现在可以送至特定的位置。
    修复：
		1、
	TODO:
		1、在时间线框架上需要添加一个未来要求的提示。

*我没有提供足够的问题供玩家解决		

想了这么半天，终于想明白现在ROOT卡在哪了。首先我先大言不惭地说一句，这款游戏多少还是做到了【上手易、深度够】这一特点，要不然也不会有那位老哥。
但是根据“解决问题”学说，此时分析Root的问题其实就很明显了。目前的Gameplay是一个过关的“工具”。但是现在这个“世界”并没有足够的问题来解决。
在学习明白这个工具后，就很快地进入没有实际目标地状态了————进入一个只能刷分的状态。这里是很不行的。
说白了就是目前这款游戏是一个十分“古典”的游戏，就很类似街机和纯粹的象棋那种棋类的游戏。

其实破局的关键就是————引入“生涯”系统。（其实这个答案就在Z社游戏里摆着
如果和Z社进行比较的话，还有一个问题，就是衡量游戏成果的metric还是太过单一，只有“金钱”这一项。
其实棋盘上有很多的参数，但是还是被collapse到了金钱这一项，这个是要revert的。
==的确，是涉及的核心机制的修改==
宏观的思路就是————要有“生涯”系统。
但是在生涯系统中需要解决的是什么的呢？
有两大方向：
    1、根据生涯系统的每个任务不同而特异性定制。（例如把什么单元移到哪里什么的
    2、需要修改整体的游戏机制，将metric本身revert掉，要考虑整体，而不能把结果最终塌陷为金钱而已。正如Z社游戏一样，达成的目标相较于一个金钱而已是复杂很多的目标。

一个相关的游戏机制的更新：
	将所有端口的数据完全量化，例如：有XXXX个单位的一般数据、XXXX个单位的网络数据；等等
	然后再棋盘中，设计一些特定（可以是固定的）的单元，上面有一些特定的端口。其中需要一些特定的数据。
	其中的要求就是某个接口要接收某些特定的数据，并且要持续一定量的时间。

首先需要关卡框架的重建、但是目前来看，整个框架的确不需要大改(顶多改改名)。
ActionAsset里面存储的LevelType完全去掉。LevelLogic和其派生类都不需要移除，只不过每个派生类需要挂在一个Prefab上面。
ActionAsset里面存储对应GameObject。

现在的Level系统的框架是：
每个Level都需要一个独立ActionAsset。
这个ActionAsset里面储存这个Level独立的数据+此Level的LevelLogic
	*注1，此LevelLogic作为一个有对应Mono的Prefab成为引用
	*注2，类似的关卡可以共用一套LevelLogic，例如某一Tutorial的KM和Touch版
所有的Level的Asset将作为序列储存为AssetLib进行管理。

现在就是要开始将Side里面添加一些恭喜了，目前Side只是一个enum而已，可能需要改成一个struct
突然想到，就是接口LED显示的值，可以就是所处网络深度的反相值，最深为1，最浅为深度值。
这样会导致端口两侧的数据不同，其中显示数值比较大的那个。
现在发现如下几个问题：
1、在决定使用哪个端口数据时，如果同时有网络和普通数据；一样还则罢了，如果计算结果不同怎么办？
2、在硬盘计算的时候，其实没有最深深度的，只有“个数”这个概念。如果由别的旁支的话，那么在计算能量的时候就会受到别的旁支的干扰。

硬盘数据的显示逻辑应该是这样的：
1、只有从CPU搜寻过来的接口显示信号、有且必然有一个（按照这个逻辑，CPU是不显示信号的）
2、显示的数据是剩下三个接口（若没有则该方向记0），的深度之和再+1（自己）


生涯模式界面修改：
	上划的面板切换成相关提示和任务完成说明。

生涯模式修改：
	商店初步时可以不必使用金钱，直接是只能一回合每一个；弄个Token什么的限制一下总体数量。

生涯模式关卡列表：
	1、第一天上班——学习基本操作，任务内容：将所有的模组连接到一起。
	2、用点儿脑子——学习信号基础（CPU和硬盘），任务内容：将所有硬盘模组连接到CPU上。
	3、时间不等人——学习时间线的基础，任务内容：在一定步数限制的情况下，将所有的模组连接到一起。（要修改来适配现在的时间轴玩法。）
	4、买买买——学习商店，任务内容：空的棋盘，需要让玩家成功购买若干个模组（给一定金钱，但是先不要受棋盘影响）。
	5、该干活了——学习时间线的区分，任务内容：在一定步数限制的情况下，将所有的模组连接到一起。
	6、别瞎花钱——学习赚钱、成本，任务内容：让玩家学习收入和成本的概念，默认一个亏损网络，要求一定步数受整个网络需要是盈利的。
	7、来点儿别的——学习网络信号基础，任务内容：提供网线模组，并且要求完全串联，明确和硬盘的差异。
	8、搁一起呢？——学习硬盘、网络信号合并，任务内容：固定一些网络模组伸出来，处理器核心藏起来，需要使用这些将硬盘和CPU连起来。
	9、别太放松——学习天灾模组的内容，任务内容：所有的打击位置需要和初始棋盘设定好，要求让所有“有用”模组存活，垃圾模组清除。

现在还有一个问题，就是上面进行包装后，其中一个重要的问题就是整个场景被集约为一个数值的问题还没有解决。还是需要考虑这个场地本身有什么的可玩的东西。

假设这是一个后端、然后直接影响一些“前端”的内容呢？
“前端”需要在特定时间端中持续满足一定量数据要求。
就是跟周期有一个时间轴，在这个时间轴上某个特定时间段中有一定量的数据要求，满足多少百分比以上过关（？）
还真可以，并且就是可以X时间后开始有灾难，并且哪个特定时间端中可能需要维持XXX以上。
但是就是这个时间轴如何呈现？如果全能看见就会太小，如果就那么一截儿的话，玩家无法预先设计。
*并且可以设计一些单周期加速的一些东西。


之前佳迪提到的，就是这个游戏的乐趣在哪里。这个虽然我没有告诉他，
但是实际上是有的：
	就是板块放置和长程策划。
所有的机制都要和为此进行服务，移除弱化这个乐趣的机制，强化这个乐趣的机制。
这就对一些机制做出了指导方案：
	1、商店还是要制作出定点投放的机制（加强玩家对版图的控制），但是要保留并奖励随机投放的单元（对长期规划的奖励）
	2、版图上要对Station单元有更多的应用（提高版图的意义）
	3、时间线上要添加更远程的提示（便于玩家长期规划）
	4、异形板块（?）
	5、版图本身收束是不是有点快？

商店制定出了投放流程，但是现在投放的收益太高了，需要其他方式去限制。能限制的方法有以下几个：
	1、大幅降低初始资金（提高资金的意义）
	2、大幅提高运费本身
	--1\2--都需要让玩家去计划、节省价格，但是无法让玩家得到直观反馈、并且mentalModel很不明确。
	3、运送购买强制cycle，（随机购买不cycle）--早期收益极高，无法平衡。
	4、其他方式：（还需要进行开关，要方便测试这几种可能。
		a、所有定点投放的Unit都是station的？(需要灾难可以摧毁stationUnit)--意外地有潜力，可以深挖。
		b、允许顶点投放地只能是一个固定范围。
			1、随机圈定一个范围，玩家在里面随便选
			2、需要建立特定的逻辑，例如必须和已有单位相连等
			3、创建商店单元（现在这个是优先级最高的想法、并且目前称为HQ单元（待定）。
				a、需要商店单元上输入特定数量信号才能定点投放。
				b、只能定点投放之商店单元周边的单元格（四方向/八方向）